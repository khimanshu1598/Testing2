name: Deploy Environment

on:
  workflow_dispatch:
    inputs:
      ls6_global_00:
        description: 'LS6 Global - 00'
        type: boolean
        required: false
      ls6_global_01:
        description: 'LS6 Global - 01'
        type: boolean
        required: false
      prod_global_00:
        description: 'Production Global - 00'
        type: boolean
        required: false
      prod_global_01:
        description: 'Production Global - 01'
        type: boolean
        required: false

jobs:
  prepare-matrix:
    runs-on: windows-latest
    outputs:
      environments: ${{ steps.set-matrix.outputs.environments }}
    steps:
      - id: set-matrix
        run: |
          # Initialize the environments array correctly
          $environments = @()  # Correct array initialization
          
          if ("${{ inputs.ls6_global_00 }}" -eq "true") { $environments += "LS6 Global - 00" }
          if ("${{ inputs.ls6_global_01 }}" -eq "true") { $environments += "LS6 Global - 01" }
          if ("${{ inputs.prod_global_00 }}" -eq "true") { $environments += "Production Global - 00" }
          if ("${{ inputs.prod_global_01 }}" -eq "true") { $environments += "Production Global - 01" }

          # Convert array to JSON string for passing to deploy job
          $json = $environments | ConvertTo-Json -Compress
          echo "environments=$json" >> $env:GITHUB_OUTPUT
        shell: pwsh

  deploy:
    needs: prepare-matrix
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install PowerShell-YAML Module
        shell: pwsh
        run: |
          try {
              Install-Module -Name powershell-yaml -Force -Scope CurrentUser -AllowClobber
          } catch {
              Write-Error "Failed to install powershell-yaml module: $_"
              exit 1
          }

      - name: Process Variables for Selected Environments
        shell: pwsh
        run: |
          # Ensure the environment data is parsed correctly from the JSON string
          $environments = ${{ fromJson(needs.prepare-matrix.outputs.environments) }}

          # Debug: Print the environments array to ensure it is parsed correctly
          Write-Output "Environments to process: $($environments -join ', ')"

          # Loop through each environment and process
          foreach ($environment in $environments) {
              Write-Output "Processing environment: $environment"
              ./fetch-vars.ps1 -environment $environment
          }
