name: Deploy Environment
on:
  workflow_dispatch:
    inputs:
      ls6_global_00:
        description: 'LS6 Global - 00'
        type: boolean
        default: false
      ls6_global_01:
        description: 'LS6 Global - 01'
        type: boolean
        default: false
      prod_global_00:
        description: 'Production Global - 00'
        type: boolean
        default: false
      prod_global_01:
        description: 'Production Global - 01'
        type: boolean
        default: false
      # Add more inputs as needed...

jobs:
  create-environment-matrix:
    runs-on: windows-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Build Environment Matrix
        id: set-matrix
        shell: pwsh
        run: |
          # Initialize an array for environments
          $environments = @()

          # Define a mapping of inputs to environment names
          $envMap = @{
            "ls6_global_00" = "LS6 Global - 00"
            "ls6_global_01" = "LS6 Global - 01"
            "prod_global_00" = "Production Global - 00"
            "prod_global_01" = "Production Global - 01"
            # Add more mappings as needed...
          }

          # Access GitHub Action inputs dynamically
          foreach ($key in $envMap.Keys) {
              $inputValue = (Get-Variable -Name $key -ErrorAction SilentlyContinue).Value
              if ($inputValue -eq $true) {
                  $environments += $envMap[$key]
              }
          }

          # Convert the array to JSON format
          $matrixJson = @{"environment" = $environments} | ConvertTo-Json -Depth 1
          Write-Output "matrix=$matrixJson" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

  deploy:
    needs: create-environment-matrix
    strategy:
      matrix: ${{ fromJson(needs.create-environment-matrix.outputs.matrix) }}
      max-parallel: 1
      fail-fast: false
    runs-on: windows-latest
    environment: ${{ matrix.environment }}

    steps:
      - uses: actions/checkout@v3

      - name: Install PowerShell-YAML Module
        shell: pwsh
        run: Install-Module -Name powershell-yaml -Force -Scope CurrentUser

      - name: Execute PowerShell Script
        shell: pwsh
        run: ./fetch-vars.ps1 -environment "${{ matrix.environment }}"
